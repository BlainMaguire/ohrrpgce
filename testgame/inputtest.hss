include, plotscr.hsd
include, scancode.hsi

global variable (1, tick)
global variable (2, input hash)
global variable (3, show hash)

#Removed from plotscr.hsd
script, set extended scancodes enabled, hsd:bit=1, begin
  if(hsd:bit) then (hsd:bit := 256)
  write general(177,(read general(177),and,-257)+hsd:bit)
end

plotscript, main, begin
  suspend player

  #keyboard main
  joystick main
end

plotscript, keyboard main, begin
  load slice collection (0)
  set slice lookups (sprite layer)

  while (1) do, begin
    tick += 1
    if (key is pressed(key:ctrl) && keypress(key:t)) then (
      enable input text (not (input text enabled))
      $4=""
    )
    if (key is pressed(key:ctrl) && keypress(key:e)) then (
      set extended scancodes enabled (extended scancodes enabled, xor, 1)
    )
    if (key is pressed(key:ctrl) && keypress(key:h)) then (
      show hash := true
    )
    update keyboard strings
    update buttons (-8, 127)
    wait
  end
end

plotscript, joystick main, begin
  load slice collection (2)
  set slice lookups (sprite layer)  # Only needed for the Control keys, I set the lookups of buttons directly instead of extra0

  variable(joynum)

  while (1) do, begin
    tick += 1
    if (keypress(key:plus)) then (joynum += 1)
    if (keypress(key:minus) && joynum > 0) then (joynum -= 1)

    update joystick strings (joynum)
    update buttons (-8, 0)
    update buttons (joy:button1, joy:button32, joynum)
    wait
  end
end

script, update keyboard strings, begin
  $0="Scancode backcompat: "
  if (extended scancodes enabled) then (
    $0+"OFF"
  ) else (
    $0+"ON"
  )
  show string at (0, 4, 8)
  $1="(Ctrl+E toggle)"
  show string at (1, 12, 18)
  if (show hash) then (
    $2="Hash:"
    append number (2, abs(input hash))
    show string at (2, 200, 40)
  )

  show string at (3, 0, 48)
  $3="Ctrl+T: enable text input"
  if (input text enabled) then (
    get input text (5)

    variable (i)
    for (i, 1, string length (5)) do (
      input hash += (input hash * 333667), xor, ascii from string (5, i)
    )

    4 $+ 5
    if (string length (4) > 33) then (
      trim string (4, string length (4) -- 33 + 1, 33)
    )
    if (keypress (key:backspace)) then (
      trim string (4, string length (4), 1)
    )
    $3="Input :"
    3 $+ 4
  )
end

#Keyboard scancodes are stored in extra0, which we copy
#into the lookup for convenience (and for testing)
script, set slice lookups, sl, begin
  if (get slice lookup (sl) == 0 && get slice extra (sl, 0)) then (
    # Offet by 100 to allow negative scancode while avoiding disallowed negative lookup codes
    set slice lookup (sl, 100 + get slice extra (sl, 0))
  )

  variable (child)
  child := first child (sl)
  while (child) do, begin
    set slice lookups (child)
    child := next sibling (child)
  end
end

#Update appearance of the button slices 
script, update buttons, first, last, joynum = 0, begin
  variable (i, sl, st)
  for (i, first, last) do, begin
    sl := lookup slice (100 + i)
    if (sl == 0) then (continue)

    if (slice is rect(sl)) then (
      set rect style(sl, keyval(i, joynum) + 1)
    ) else if (slice is ellipse(sl)) then (
      set ellipse fill col(sl, get box style color(keyval(i, joynum) + 1))
    )

    if (keyval(i, joynum)) then (
      input hash += (input hash * 333667), xor, (tick * 367 + i * 336667 + keyval(i, joynum) * 3336677)  # primes
    )
  end
end

script, update joystick strings, joynum, begin
  subscript, update axis, axis, lookup, strid, begin
    variable(sl)
    appendnumber(strid, joystickaxis(axis, 100, joynum))
    sl := lookupslice(lookup)
    set slice text(sl, strid)
  end

  subscript, update str, lookup, strid, begin
    variable(sl)
    sl := lookupslice(lookup)
    set slice text(sl, strid)
  end

  update axis(axis:X, sli:left X axis, $0="X")
  update axis(axis:Y, sli:left Y axis, $0="Y")
  update axis(axis:RightX, sli:right X axis, $0="X")
  update axis(axis:RightY, sli:right Y axis, $0="Y")
  update axis(axis:L2, sli:L2 axis, $0="")
  update axis(axis:R2, sli:R2 axis, $0="")

  getjoystickname(0, joynum)
  update str(sli:joystick name, 0)
  $0=""
  appendnumber(0, joynum)
  update str(sli:joystick num, 0)
end
