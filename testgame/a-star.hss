define constant(7, last map)
define constant(6, default map)

plotscript, on new game, begin
  set hero speed(me, 4)
  jump to map(none, default map)
end

plotscript, quit this game, begin
  game over
end

plotscript, on menu button, begin
  suspend player
  suspend npcs
  variable(i, m, mi)
  m := create menu()
  set menu on close script(m, @on menu close)
  for(i, 0, last map) do(
    mi := add menu item(m)
    get map name(0, i)
    set menu item caption(mi, 0)
    set menu item type(mi, menutype:script)
    set menu item subtype(mi, @jump to map)
    set menu item extra(mi, 0, i)
    set menu item bit(mi, menu item bit:Close menu when selected, true)
    if(i == current map) then(select menu item(mi))
  )
  mi := add menu item(m)
  set menu item caption(mi, $0="Quit Game")
  set menu item type(mi, menutype:script)
  set menu item subtype(mi, @quit this game)
end

plotscript, on menu close, begin
  resume player
  resume npcs
end

plotscript, jump to map, mi, mapnum, begin
  suspend player
  suspend npcs
  teleport to map(mapnum)
  set hero position(0, NPC x(0), NPC y(0))
  delete npc(0)
  resume npcs
  resume player
end

plotscript, on key press handler, begin
  if(keyval(key:space) > 1 || keyval(key:enter) > 1 || keyval(key:ctrl) > 1) then(
    try to splat
  )
end

script, try to splat, begin
  variable(x, y, d, ref, count, i)
  x := hero x(me)
  y := hero y(me)
  d := hero direction(me)
  x := ahead x(x, d)
  y := ahead y(y, d)
  count := npc at spot(x, y, get count)
  for (i, 0, count -- 1) do(
    ref := npc at spot(x, y, i)
    if(ref) then(splat slime(ref))
  )
end

script, ahead x, x, d, dist=1, begin
  switch(d) do(
    case(left) exit returning(x -- dist)
    case(right) exit returning(x + dist)
  )
  exit returning(x)
end

script, ahead y, y, d, dist=1, begin
  switch(d) do(
    case(up) exit returning(y -- dist)
    case(down) exit returning(y + dist)
  )
  exit returning(y)
end

script, splat slime, ref, begin
  # Only unsplatted slimes can splat
  if(get npc id(ref) == 1) then(
    wait for NPC
    change npc id(ref, 2)
    set npc obstructs(ref, false)
  )
end

plotscript, clicky switch, arg, ref, begin
  variable(tile, pass)
  if(npc direction(ref) == down) then(
    # rock doors are open, we want to close them.
    tile := 42
    pass := north wall + east wall + south wall + west wall
    set npc direction(ref, up)
  )else(
    # rock doors are closed, we want to open them
    tile := 16
    pass := none
    set npc direction(ref, down)
  )
  variable(x, y)
  for (y, 0, map width -- 1) do(
    for (x, 0, map height -- 1) do(
      if(read zone(2, x, y)) then(
        write map block(x, y, tile)
        write pass block(x, y, pass)
      )
    )
  )
end


